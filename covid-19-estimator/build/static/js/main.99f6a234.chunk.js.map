{"version":3,"sources":["estimator.js","interface.js","App.js","serviceWorker.js","index.js"],"names":["covid19ImpactEstimator","data","days","reportedCases","periodType","timeToElapse","totalHospitalBeds","region","impact","severeImpact","factor","Math","trunc","beds","avgIncome","avgDailyIncomeInUSD","avgPopulation","avgDailyIncomePopulation","currentlyInfected","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","impDollarsInFlight","dollarsInFlight","severeCases","availableBeds","casesForICU","casesForVentilators","cashInFlight","React","require","Display","state","population","name","avgAge","handleChange","bind","handleSubmit","event","target","value","this","setState","preventDefault","input","Number","result","className","style","width","onSubmit","for","type","id","data-population","required","onChange","data-reported-cases","data-time-to-elapse","data-period-type","data-total-hospital-beds","data-go-estimate","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99f6a234.chunk.js","sourcesContent":["const covid19ImpactEstimator = (data) => {\n  const {\n    reportedCases, periodType, timeToElapse, totalHospitalBeds, region\n  } = data;\n  const impact = {};\n  const severeImpact = {};\n\n  let days;\n\n  if (periodType === 'months') {\n    days = timeToElapse * 30;\n  } else if (periodType === 'weeks') {\n    days = timeToElapse * 7;\n  } else {\n    days = timeToElapse;\n  }\n\n  const factor = Math.trunc(days / 3);\n  const beds = totalHospitalBeds * 0.35;\n\n  const avgIncome = region.avgDailyIncomeInUSD;\n  const avgPopulation = region.avgDailyIncomePopulation;\n\n  impact.currentlyInfected = reportedCases * 10;\n  impact.infectionsByRequestedTime = impact.currentlyInfected * (2 ** factor);\n  impact.severeCasesByRequestedTime = Math.trunc(impact.infectionsByRequestedTime * 0.15);\n  impact.hospitalBedsByRequestedTime = Math.trunc(beds - impact.severeCasesByRequestedTime);\n  impact.casesForICUByRequestedTime = Math.trunc(impact.infectionsByRequestedTime * 0.05);\n  impact.casesForVentilatorsByRequestedTime = Math.trunc(impact.infectionsByRequestedTime * 0.02);\n  const impDollarsInFlight = (impact.infectionsByRequestedTime * avgIncome * avgPopulation) / days;\n  impact.dollarsInFlight = Math.trunc(impDollarsInFlight);\n\n  severeImpact.currentlyInfected = reportedCases * 50;\n  severeImpact.infectionsByRequestedTime = severeImpact.currentlyInfected * (2 ** factor);\n\n  const severeCases = severeImpact.infectionsByRequestedTime * 0.15;\n  severeImpact.severeCasesByRequestedTime = Math.trunc(severeCases);\n\n  const availableBeds = beds - severeImpact.severeCasesByRequestedTime;\n  severeImpact.hospitalBedsByRequestedTime = Math.trunc(availableBeds);\n\n  const casesForICU = severeImpact.infectionsByRequestedTime * 0.05;\n  severeImpact.casesForICUByRequestedTime = Math.trunc(casesForICU);\n\n  const casesForVentilators = severeImpact.infectionsByRequestedTime * 0.02;\n  severeImpact.casesForVentilatorsByRequestedTime = Math.trunc(casesForVentilators);\n\n  const cashInFlight = (severeImpact.infectionsByRequestedTime * avgIncome * avgPopulation) / days;\n  severeImpact.dollarsInFlight = Math.trunc(cashInFlight);\n\n  return {\n    data,\n    impact,\n    severeImpact\n  };\n};\n\nexport default covid19ImpactEstimator;\n","import covid19ImpactEstimator from './estimator';\r\nconst React = require('react');\r\n\r\nclass Display extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            reportedCases: \"\",\r\n            population: \"\",\r\n            periodType: \"\",\r\n            timeToElapse: \"\",\r\n            totalHospitalBeds: \"\",\r\n            impact: \"\",\r\n            severeImpact: \"\",\r\n            region: {\r\n                name: 'Africa',\r\n                avgAge: 19.7,\r\n                avgDailyIncomeInUSD: 5,\r\n                avgDailyIncomePopulation: 0.71\r\n              }\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const input = {\r\n            region: this.state.region,\r\n            population: Number(this.state.population),\r\n            timeToElapse: Number(this.state.timeToElapse),\r\n            periodType: this.state.periodType,\r\n            totalHospitalBeds: Number(this.state.totalHospitalBeds),\r\n            reportedCases: Number(this.state.reportedCases)\r\n        };\r\n        const result = covid19ImpactEstimator(input);\r\n        const {impact, severeImpact} = result;\r\n\r\n        this.setState({\r\n            impact: impact,\r\n            severeImpact: severeImpact\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <header className=\"m-auto text-light bg-info font-weight-bold rounded mt-4\" style={{width: \"50%\"}}>COVID-19 ESTIMATOR</header>\r\n                <div className=\"row m-auto\" style={{width: \"90%\"}}>\r\n                    <div className=\"container col-sm-4 mt-4\">\r\n                        <div className=\"container bg-primary radius text-light font-weight-bold\">CURRENT COVID-19 STATISTICS</div>\r\n                        <form className=\"form-control text-primary font-weight-bold\" onSubmit={this.handleSubmit}>\r\n                            <div className =\"form-group\">\r\n                                <label className=\"form-inline\" for=\"population\">Total Population</label>\r\n                                <input className=\"form-control\" type=\"number\" id=\"population\" name=\"population\" data-population required onChange={this.handleChange}/>\r\n                                \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-inline\" for=\"reportedCases\">Reported Cases</label>\r\n                                <input className=\"form-control\" type=\"number\" id=\"reportedCases\" name=\"reportedCases\" data-reported-cases required onChange={this.handleChange}/>\r\n                                \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-inline\" for=\"timeToElapse\">Time Period</label>\r\n                                <input className=\"form-control\" type=\"number\" id=\"timeToElapse\" name=\"timeToElapse\" data-time-to-elapse required onChange={this.handleChange}/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-inline\" for=\"periodType\" id=\"lab\">Period Type</label>\r\n                                <select className=\"form-control\" id=\"periodType\" name=\"periodType\" data-period-type onChange={this.handleChange}>\r\n                                    <option value=\"days\">Days</option>\r\n                                    <option value=\"weeks\">Weeks</option>\r\n                                    <option value=\"months\">Months</option>\r\n                                </select>\r\n                                </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-inline\" for=\"totalHospitalBeds\">Hospital Beds</label>\r\n                                <input className=\"form-control\" type=\"number\" id=\"totalHospitalBeds\" name=\"totalHospitalBeds\" data-total-hospital-beds required onChange={this.handleChange}/><br></br>\r\n                            </div>\r\n                                <input className=\"btn btn-primary btn-lg\" type=\"submit\" value=\"Estimate\" data-go-estimate/>\r\n                                \r\n                            </form>\r\n                    </div>\r\n\r\n                    <div className=\"container col-sm-4 mt-4\">\r\n                        <div className=\"container bg-warning radius text-light font-weight-bold\">NORMAL IMPACT ESTIMATE</div>\r\n                    \r\n                        <div className =\"border rounded text-success font-weight-bold text-left font-weight-bold\">\r\n                            <p className=\"ml-3\">ACTUAL INFECTIONS: {this.state.impact.currentlyInfected} </p><br/>\r\n                            <p className=\"ml-3\">INFECTIONS AFTER {this.state.timeToElapse} {this.state.periodType} : {this.state.impact.infectionsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">SEVERE CASES: {this.state.impact.severeCasesByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">AVAILABLE HOSPITAL BEDS: {this.state.impact.hospitalBedsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">CASES FOR ICU: {this.state.impact.casesForICUByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">CASES FOR VENTILATORS: {this.state.impact.casesForVentilatorsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">ECONOMIC IMPACT ($): {this.state.impact.dollarsInFlight} </p><br/>                        \r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"container col-sm-4 mt-4\">\r\n                        <div className=\"container bg-danger radius text-light font-weight-bold\">SEVERE IMPACT ESTIMATE</div>\r\n                    \r\n                        <div className =\"border rounded text-danger font-weight-bold text-left\">\r\n                            <p className=\"ml-3\">ACTUAL INFECTIONS: {this.state.severeImpact.currentlyInfected} </p><br/>\r\n                            <p className=\"ml-3\">INFECTIONS AFTER {this.state.timeToElapse} {this.state.periodType}: {this.state.severeImpact.infectionsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">SEVERE CASES: {this.state.severeImpact.severeCasesByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">AVAILABLE HOSPITAL BEDS: {this.state.severeImpact.hospitalBedsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">CASES FOR ICU: {this.state.severeImpact.casesForICUByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">CASES FOR VENTILATORS: {this.state.severeImpact.casesForVentilatorsByRequestedTime} </p><br/>\r\n                            <p className=\"ml-3\">ECONOMIC IMPACT ($): {this.state.severeImpact.dollarsInFlight} </p><br/>                        \r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Display from './interface';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}